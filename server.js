// –ü—Ä–æ—Å—Ç–æ–π Express.js —Å–µ—Ä–≤–µ—Ä –¥–ª—è PixelStars (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)
const express = require('express');
const cors = require('cors');
const crypto = require('crypto');
const path = require('path');
const axios = require('axios'); // –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
const cheerio = require('cheerio'); // –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, '../')));

// –ö—ç—à –¥–ª—è —Ü–µ–Ω Fragment
let fragmentPriceCache = {
    price: null,
    lastUpdate: 0,
    priceHistory: []
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å Fragment.com
async function fetchFragmentPrice() {
    try {
        console.log('üîç –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É —Å Fragment...');
        
        // –ú–µ—Ç–æ–¥ 1: –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å
        let price = null;
        
        try {
            const response = await axios.get('https://fragment.com/stars', {
                headers: {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
                    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                    'Accept-Language': 'en-US,en;q=0.5',
                    'Accept-Encoding': 'gzip, deflate, br',
                    'DNT': '1',
                    'Connection': 'keep-alive',
                    'Upgrade-Insecure-Requests': '1'
                },
                timeout: 10000
            });
            
            if (response.status === 200) {
                price = parseFragmentHTML(response.data);
            }
        } catch (error) {
            console.warn('–ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ Fragment –Ω–µ—É–¥–∞—á–µ–Ω:', error.message);
        }
        
        // –ú–µ—Ç–æ–¥ 2: –ï—Å–ª–∏ –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        if (!price) {
            price = await getFragmentPriceAlternative();
        }
        
        if (price && price > 0) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            fragmentPriceCache.price = price;
            fragmentPriceCache.lastUpdate = Date.now();
            fragmentPriceCache.priceHistory.push({
                price: price,
                timestamp: Date.now()
            });
            
            // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–∞–ø–∏—Å–µ–π
            if (fragmentPriceCache.priceHistory.length > 100) {
                fragmentPriceCache.priceHistory = fragmentPriceCache.priceHistory.slice(-100);
            }
            
            console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ —Ü–µ–Ω–∞ Fragment: ${price}‚ÇΩ`);
            return price;
        }
        
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã Fragment:', error.message);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ü–µ–Ω—É –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—Ç–∞—Ä—à–µ —á–∞—Å–∞
        if (fragmentPriceCache.price && (Date.now() - fragmentPriceCache.lastUpdate) < 3600000) {
            console.warn('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞');
            return fragmentPriceCache.price;
        }
        
        throw error;
    }
}

// –ü–∞—Ä—Å–∏–Ω–≥ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã Fragment –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ü–µ–Ω—ã
function parseFragmentHTML(html) {
    try {
        const $ = cheerio.load(html);
        
        // –†–∞–∑–ª–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ü–µ–Ω—ã
        const selectors = [
            '.price-value',
            '[data-price]',
            '.star-price',
            '.rate-value'
        ];
        
        for (const selector of selectors) {
            const element = $(selector);
            if (element.length > 0) {
                const text = element.text() || element.attr('data-price');
                const price = parseFloat(text.replace(/[^\d.]/g, ''));
                if (price > 0 && price < 100) {
                    return price;
                }
            }
        }
        
        // –ü–æ–∏—Å–∫ –≤ —Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const patterns = [
            /price["\s]*:[\s]*["\s]*([0-9]+\.?[0-9]*)/i,
            /rate["\s]*:[\s]*["\s]*([0-9]+\.?[0-9]*)/i,
            /([0-9]+\.?[0-9]*)\s*‚ÇΩ\s*per\s*star/i,
            /([0-9]+\.?[0-9]*)\s*—Ä—É–±\s*–∑–∞\s*–∑–≤–µ–∑–¥—É/i
        ];
        
        for (const pattern of patterns) {
            const match = html.match(pattern);
            if (match && match[1]) {
                const price = parseFloat(match[1]);
                if (price > 0 && price < 100) {
                    return price;
                }
            }
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML:', error);
    }
    
    return null;
}

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ü–µ–Ω—ã Fragment
async function getFragmentPriceAlternative() {
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–ª–∏ API
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –∫—Ä–∏–ø—Ç–æ–±–∏—Ä–∂–∏, —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª—ã —Å —Ü–µ–Ω–∞–º–∏ –∏ —Ç.–¥.
    
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null, –Ω–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å:
    // - –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª–æ–≤
    // - API –¥—Ä—É–≥–∏—Ö –ø–ª–æ—â–∞–¥–æ–∫
    // - –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ü–µ–Ω
    
    return null;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ initData –æ—Ç Telegram
function verifyTelegramWebAppData(initData) {
    try {
        const urlParams = new URLSearchParams(initData);
        const hash = urlParams.get('hash');
        urlParams.delete('hash');
        
        const dataCheckString = Array.from(urlParams.entries())
            .sort(([a], [b]) => a.localeCompare(b))
            .map(([key, value]) => `${key}=${value}`)
            .join('\n');
        
        const secretKey = crypto.createHmac('sha256', 'WebAppData').update(BOT_TOKEN).digest();
        const calculatedHash = crypto.createHmac('sha256', secretKey).update(dataCheckString).digest('hex');
        
        return calculatedHash === hash;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ initData:', error);
        return false;
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ initData
function getUserFromInitData(initData) {
    try {
        const urlParams = new URLSearchParams(initData);
        const userStr = urlParams.get('user');
        if (userStr) {
            return JSON.parse(decodeURIComponent(userStr));
        }
        return null;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        return null;
    }
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
const authenticateUser = (req, res, next) => {
    const initData = req.headers.authorization?.replace('Bearer ', '');
    
    if (!initData) {
        return res.status(401).json({ 
            success: false, 
            error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏' 
        });
    }
    
    if (!verifyTelegramWebAppData(initData)) {
        return res.status(401).json({ 
            success: false, 
            error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏' 
        });
    }
    
    const user = getUserFromInitData(initData);
    if (!user) {
        return res.status(401).json({ 
            success: false, 
            error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' 
        });
    }
    
    req.user = user;
    next();
};

// –†–æ—É—Ç—ã API

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã Fragment
app.get('/api/fragment-price', async (req, res) => {
    try {
        let price = fragmentPriceCache.price;
        
        // –ï—Å–ª–∏ —Ü–µ–Ω–∞ –≤ –∫—ç—à–µ —Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º
        if (!price || (Date.now() - fragmentPriceCache.lastUpdate) > 300000) {
            price = await fetchFragmentPrice();
        }
        
        if (price) {
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞—à–∏ —Ü–µ–Ω—ã —Å –Ω–∞—Ü–µ–Ω–∫–æ–π
            const markup = 0.25; // 25% –Ω–∞—Ü–µ–Ω–∫–∞
            const sellMarkdown = 0.15; // 15% —Å–∫–∏–¥–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ
            
            res.json({
                success: true,
                data: {
                    fragmentPrice: price,
                    buyPrice: price * (1 + markup),
                    sellPrice: price * (1 - sellMarkdown),
                    lastUpdate: fragmentPriceCache.lastUpdate,
                    trend: calculatePriceTrend(fragmentPriceCache.priceHistory)
                }
            });
        } else {
            throw new Error('–¶–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ API —Ü–µ–Ω—ã Fragment:', error);
        res.status(500).json({
            success: false,
            error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É Fragment'
        });
    }
});

// –†–µ–∑–µ—Ä–≤–Ω—ã–π endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã
app.get('/api/fragment-price-backup', async (req, res) => {
    try {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ü–µ–Ω—É –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∞ —Å—Ç–∞—Ä–∞—è
        if (fragmentPriceCache.price) {
            res.json({
                success: true,
                price: fragmentPriceCache.price,
                lastUpdate: fragmentPriceCache.lastUpdate,
                isBackup: true
            });
        } else {
            res.status(404).json({
                success: false,
                error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ'
            });
        }
    } catch (error) {
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Ç—Ä–µ–Ω–¥–∞
function calculatePriceTrend(priceHistory) {
    if (!priceHistory || priceHistory.length < 3) return 'stable';
    
    const recent = priceHistory.slice(-3);
    const firstPrice = recent[0].price;
    const lastPrice = recent[recent.length - 1].price;
    
    const changePercent = ((lastPrice - firstPrice) / firstPrice) * 100;
    
    if (changePercent > 2) return 'up';
    if (changePercent < -2) return 'down';
    return 'stable';
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ (–æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π)
app.get('/api/rates', async (req, res) => {
    try {
        let fragmentPrice = fragmentPriceCache.price;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (!fragmentPrice || (Date.now() - fragmentPriceCache.lastUpdate) > 300000) {
            try {
                fragmentPrice = await fetchFragmentPrice();
            } catch (error) {
                // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à
                fragmentPrice = fragmentPriceCache.price;
            }
        }
        
        if (fragmentPrice) {
            const markup = 0.25; // 25% –Ω–∞—Ü–µ–Ω–∫–∞
            const sellMarkdown = 0.15; // 15% —Å–∫–∏–¥–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ
            
            const rates = {
                buy: fragmentPrice * (1 + markup),
                sell: fragmentPrice * (1 - sellMarkdown),
                fragment: fragmentPrice,
                lastUpdate: Date.now(),
                trend: calculatePriceTrend(fragmentPriceCache.priceHistory)
            };
            
            res.json({
                success: true,
                data: rates
            });
        } else {
            // Fallback –Ω–∞ —Å—Ç–∞—Ç–∏—á–Ω—ã–µ –∫—É—Ä—Å—ã
            const rates = {
                buy: 8.50,
                sell: 7.50,
                fragment: 7.0,
                lastUpdate: Date.now(),
                trend: 'stable'
            };
            
            res.json({
                success: true,
                data: rates,
                warning: '–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫—É—Ä—Å—ã'
            });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/user', authenticateUser, async (req, res) => {
    try {
        // TODO: –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const userData = {
            id: req.user.id,
            username: req.user.username,
            first_name: req.user.first_name,
            balance: 500, // –ó–∞–≥–ª—É—à–∫–∞
            totalTransactions: 15,
            totalBought: 2500,
            totalSold: 1000,
            createdAt: Date.now()
        };
        
        res.json({
            success: true,
            data: userData
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// –ü–æ–∫—É–ø–∫–∞ –∑–≤—ë–∑–¥
app.post('/api/buy', authenticateUser, async (req, res) => {
    try {
        const { amount } = req.body;
        
        if (!amount || amount < 1 || amount > 10000) {
            return res.status(400).json({
                success: false,
                error: '–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥'
            });
        }
        
        // TODO: –†–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∫—É–ø–∫–∏
        // 1. –ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å
        // 2. –°–æ–∑–¥–∞—Ç—å invoice –≤ –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
        // 3. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –ë–î
        // 4. –í–µ—Ä–Ω—É—Ç—å URL –¥–ª—è –æ–ø–ª–∞—Ç—ã
        
        const transaction = {
            id: Date.now(),
            userId: req.user.id,
            type: 'buy',
            amount: amount,
            rate: 8.50,
            total: amount * 8.50,
            status: 'pending',
            createdAt: Date.now()
        };
        
        res.json({
            success: true,
            data: {
                transaction,
                paymentUrl: `https://payment.example.com/pay/${transaction.id}`
            }
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// –ü—Ä–æ–¥–∞–∂–∞ –∑–≤—ë–∑–¥
app.post('/api/sell', authenticateUser, async (req, res) => {
    try {
        const { amount } = req.body;
        
        if (!amount || amount < 1) {
            return res.status(400).json({
                success: false,
                error: '–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥'
            });
        }
        
        // TODO: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        // TODO: –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–ø–ª–∞—Ç—É
        
        const transaction = {
            id: Date.now(),
            userId: req.user.id,
            type: 'sell',
            amount: amount,
            rate: 7.50,
            total: amount * 7.50,
            status: 'pending',
            createdAt: Date.now()
        };
        
        res.json({
            success: true,
            data: { transaction }
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
app.get('/api/transactions', authenticateUser, async (req, res) => {
    try {
        const { limit = 50, offset = 0 } = req.query;
        
        // TODO: –ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const transactions = [];
        
        res.json({
            success: true,
            data: {
                transactions,
                total: 0,
                hasMore: false
            }
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// Webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
app.post('/api/webhook/payment', async (req, res) => {
    try {
        // TODO: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å—å webhook
        // TODO: –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        // TODO: –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        console.log('Payment webhook:', req.body);
        
        res.json({ success: true });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ webhook:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, '../index.html'));
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, async () => {
    console.log(`PixelStars —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN`);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–µ–Ω—É Fragment –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    try {
        await fetchFragmentPrice();
        console.log('‚úÖ –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ Fragment –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
    } catch (error) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—É—é —Ü–µ–Ω—É Fragment');
    }
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
    setInterval(async () => {
        try {
            await fetchFragmentPrice();
            console.log('üîÑ –¶–µ–Ω–∞ Fragment –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
        } catch (error) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É Fragment:', error.message);
        }
    }, 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç
});

module.exports = app;