// Fragment.com API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω –Ω–∞ Telegram Stars

class FragmentAPI {
    constructor() {
        this.baseURL = 'https://fragment.com';
        this.corsProxy = 'https://api.allorigins.win/raw?url=';
        this.lastPrice = null;
        this.priceHistory = [];
        this.retryCount = 3;
        this.retryDelay = 2000;
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã
    async getStarsPrice() {
        for (let attempt = 1; attempt <= this.retryCount; attempt++) {
            try {
                console.log(`üîç –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã —Å Fragment...`);
                
                // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã
                let price = await this.tryDirectAPI();
                
                if (!price) {
                    price = await this.tryWebScraping();
                }
                
                if (!price) {
                    price = await this.tryBackupEndpoint();
                }
                
                if (price && price > 0) {
                    this.lastPrice = price;
                    this.addToPriceHistory(price);
                    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ —Ü–µ–Ω–∞: ${price}‚ÇΩ`);
                    return price;
                }
                
            } catch (error) {
                console.warn(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ—É–¥–∞—á–Ω–∞:`, error.message);
                
                if (attempt < this.retryCount) {
                    await this.delay(this.retryDelay * attempt);
                }
            }
        }
        
        // –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–∑–≤–µ—Å—Ç–Ω—É—é —Ü–µ–Ω—É
        if (this.lastPrice) {
            console.warn('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω—è—è –∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ü–µ–Ω–∞');
            return this.lastPrice;
        }
        
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É —Å Fragment –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫');
    }

    // –ú–µ—Ç–æ–¥ 1: –ü—Ä—è–º–æ–π API –∑–∞–ø—Ä–æ—Å (–µ—Å–ª–∏ Fragment –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç API)
    async tryDirectAPI() {
        try {
            // TODO: –ï—Å–ª–∏ Fragment –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π API
            const response = await fetch(`${this.baseURL}/api/stars/price`);
            
            if (response.ok) {
                const data = await response.json();
                return data.price || data.rate || data.value;
            }
        } catch (error) {
            console.log('Direct API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
        }
        return null;
    }

    // –ú–µ—Ç–æ–¥ 2: –ü–∞—Ä—Å–∏–Ω–≥ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã
    async tryWebScraping() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ CORS proxy
            const url = `${this.baseURL}/stars`;
            const proxyUrl = `${this.corsProxy}${encodeURIComponent(url)}`;
            
            const response = await fetch(proxyUrl, {
                headers: {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                }
            });
            
            if (response.ok) {
                const html = await response.text();
                return this.parsePriceFromHTML(html);
            }
        } catch (error) {
            console.log('Web scraping –Ω–µ—É–¥–∞—á–µ–Ω:', error.message);
        }
        return null;
    }

    // –ú–µ—Ç–æ–¥ 3: –†–µ–∑–µ—Ä–≤–Ω—ã–π endpoint (–Ω–∞—à –±—ç–∫–µ–Ω–¥ –∏–ª–∏ –¥—Ä—É–≥–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫)
    async tryBackupEndpoint() {
        try {
            const response = await fetch('/api/fragment-price-backup');
            
            if (response.ok) {
                const data = await response.json();
                return data.price;
            }
        } catch (error) {
            console.log('Backup endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
        }
        return null;
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω—ã –∏–∑ HTML
    parsePriceFromHTML(html) {
        try {
            // –ò—â–µ–º —Ü–µ–Ω—É –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
            const patterns = [
                /price["\s]*:[\s]*["\s]*([0-9]+\.?[0-9]*)/i,
                /rate["\s]*:[\s]*["\s]*([0-9]+\.?[0-9]*)/i,
                /([0-9]+\.?[0-9]*)\s*‚ÇΩ\s*per\s*star/i,
                /([0-9]+\.?[0-9]*)\s*—Ä—É–±\s*–∑–∞\s*–∑–≤–µ–∑–¥—É/i,
                /"stars_price"[:\s]*"?([0-9]+\.?[0-9]*)"?/i
            ];
            
            for (const pattern of patterns) {
                const match = html.match(pattern);
                if (match && match[1]) {
                    const price = parseFloat(match[1]);
                    if (price > 0 && price < 100) { // —Ä–∞–∑—É–º–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã —Ü–µ–Ω—ã
                        return price;
                    }
                }
            }
            
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º –≤ —Å–∫—Ä–∏–ø—Ç–∞—Ö
            const scriptMatches = html.match(/<script[^>]*>(.*?)<\/script>/gs);
            if (scriptMatches) {
                for (const script of scriptMatches) {
                    for (const pattern of patterns) {
                        const match = script.match(pattern);
                        if (match && match[1]) {
                            const price = parseFloat(match[1]);
                            if (price > 0 && price < 100) {
                                return price;
                            }
                        }
                    }
                }
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML:', error);
        }
        
        return null;
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –∏—Å—Ç–æ—Ä–∏—é
    addToPriceHistory(price) {
        this.priceHistory.push({
            price: price,
            timestamp: Date.now()
        });
        
        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–∞–ø–∏—Å–µ–π
        if (this.priceHistory.length > 100) {
            this.priceHistory = this.priceHistory.slice(-100);
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ —Ü–µ–Ω—ã
    getPriceTrend(periodMinutes = 30) {
        if (this.priceHistory.length < 2) return 'stable';
        
        const cutoffTime = Date.now() - (periodMinutes * 60 * 1000);
        const recentPrices = this.priceHistory.filter(p => p.timestamp > cutoffTime);
        
        if (recentPrices.length < 2) return 'stable';
        
        const firstPrice = recentPrices[0].price;
        const lastPrice = recentPrices[recentPrices.length - 1].price;
        const changePercent = ((lastPrice - firstPrice) / firstPrice) * 100;
        
        if (changePercent > 1) return 'up';
        if (changePercent < -1) return 'down';
        return 'stable';
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ü–µ–Ω—ã
    getPriceStats(periodHours = 24) {
        const cutoffTime = Date.now() - (periodHours * 60 * 60 * 1000);
        const periodPrices = this.priceHistory
            .filter(p => p.timestamp > cutoffTime)
            .map(p => p.price);
        
        if (periodPrices.length === 0) return null;
        
        const min = Math.min(...periodPrices);
        const max = Math.max(...periodPrices);
        const avg = periodPrices.reduce((a, b) => a + b, 0) / periodPrices.length;
        const current = periodPrices[periodPrices.length - 1];
        
        return {
            min: min,
            max: max,
            avg: avg,
            current: current,
            volatility: ((max - min) / avg) * 100
        };
    }

    // –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    // –ú–æ–∫–∞–ø –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–∏–º–∏—Ç–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è Fragment)
    getMockPrice() {
        const basePrice = 7.2; // –ø—Ä–∏–º–µ—Ä–Ω–∞—è —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
        const time = Date.now() / 1000;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã:
        const dailyCycle = Math.sin(time / 86400) * 0.2; // –¥–Ω–µ–≤–Ω–æ–π —Ü–∏–∫–ª
        const randomNoise = (Math.random() - 0.5) * 0.1; // —Å–ª—É—á–∞–π–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è
        const weeklyTrend = Math.sin(time / 604800) * 0.3; // –Ω–µ–¥–µ–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥
        
        return Math.max(0.1, basePrice + dailyCycle + randomNoise + weeklyTrend);
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è dev/prod —Ä–µ–∂–∏–º–æ–≤
    async getPriceWithFallback() {
        const isDevelopment = window.location.hostname === 'localhost' || 
                             window.location.hostname === '127.0.0.1';
        
        if (isDevelopment) {
            // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
            await this.delay(200 + Math.random() * 500);
            return this.getMockPrice();
        } else {
            // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
            return await this.getStarsPrice();
        }
    }
}

// –°–æ–∑–¥–∞—ë–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.fragmentAPI = new FragmentAPI();

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –º–æ–¥—É–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
if (typeof module !== 'undefined' && module.exports) {
    module.exports = FragmentAPI;
}